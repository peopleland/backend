// Code generated by MockGen. DO NOT EDIT.
// Source: internal/biz/openergamecase.go

// Package mock is a generated GoMock package.
package mock

import (
	model "backend/app/user/internal/data/model"
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateTelegramVerifyCode mocks base method.
func (m *MockUserRepo) CreateTelegramVerifyCode(ctx context.Context, userid string) (*model.TelegramVerify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTelegramVerifyCode", ctx, userid)
	ret0, _ := ret[0].(*model.TelegramVerify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTelegramVerifyCode indicates an expected call of CreateTelegramVerifyCode.
func (mr *MockUserRepoMockRecorder) CreateTelegramVerifyCode(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTelegramVerifyCode", reflect.TypeOf((*MockUserRepo)(nil).CreateTelegramVerifyCode), ctx, userid)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, address string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, address)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, address)
}

// FindOrCreateUser mocks base method.
func (m *MockUserRepo) FindOrCreateUser(ctx context.Context, address string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateUser", ctx, address)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateUser indicates an expected call of FindOrCreateUser.
func (mr *MockUserRepoMockRecorder) FindOrCreateUser(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateUser", reflect.TypeOf((*MockUserRepo)(nil).FindOrCreateUser), ctx, address)
}

// GenVerifyCode mocks base method.
func (m *MockUserRepo) GenVerifyCode(ctx context.Context, userid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenVerifyCode", ctx, userid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenVerifyCode indicates an expected call of GenVerifyCode.
func (mr *MockUserRepoMockRecorder) GenVerifyCode(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenVerifyCode", reflect.TypeOf((*MockUserRepo)(nil).GenVerifyCode), ctx, userid)
}

// GetOneUserByAddress mocks base method.
func (m *MockUserRepo) GetOneUserByAddress(ctx context.Context, address string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUserByAddress", ctx, address)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUserByAddress indicates an expected call of GetOneUserByAddress.
func (mr *MockUserRepoMockRecorder) GetOneUserByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUserByAddress", reflect.TypeOf((*MockUserRepo)(nil).GetOneUserByAddress), ctx, address)
}

// GetOrCreateTelegramVerifyCode mocks base method.
func (m *MockUserRepo) GetOrCreateTelegramVerifyCode(ctx context.Context, userid string) (*model.TelegramVerify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTelegramVerifyCode", ctx, userid)
	ret0, _ := ret[0].(*model.TelegramVerify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateTelegramVerifyCode indicates an expected call of GetOrCreateTelegramVerifyCode.
func (mr *MockUserRepoMockRecorder) GetOrCreateTelegramVerifyCode(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTelegramVerifyCode", reflect.TypeOf((*MockUserRepo)(nil).GetOrCreateTelegramVerifyCode), ctx, userid)
}

// GetUser mocks base method.
func (m *MockUserRepo) GetUser(ctx context.Context, userid string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userid)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepoMockRecorder) GetUser(ctx, userid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepo)(nil).GetUser), ctx, userid)
}

// GetUserByTelegramVerifyCode mocks base method.
func (m *MockUserRepo) GetUserByTelegramVerifyCode(ctx context.Context, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTelegramVerifyCode", ctx, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTelegramVerifyCode indicates an expected call of GetUserByTelegramVerifyCode.
func (mr *MockUserRepoMockRecorder) GetUserByTelegramVerifyCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTelegramVerifyCode", reflect.TypeOf((*MockUserRepo)(nil).GetUserByTelegramVerifyCode), ctx, code)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, userid string, updateData map[string]interface{}) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userid, updateData)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, userid, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, userid, updateData)
}

// UpdateUserByAddress mocks base method.
func (m *MockUserRepo) UpdateUserByAddress(ctx context.Context, address string, updateData map[string]interface{}) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByAddress", ctx, address, updateData)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByAddress indicates an expected call of UpdateUserByAddress.
func (mr *MockUserRepoMockRecorder) UpdateUserByAddress(ctx, address, updateData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByAddress", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserByAddress), ctx, address, updateData)
}

// MockTwitterRepo is a mock of TwitterRepo interface.
type MockTwitterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTwitterRepoMockRecorder
}

// MockTwitterRepoMockRecorder is the mock recorder for MockTwitterRepo.
type MockTwitterRepoMockRecorder struct {
	mock *MockTwitterRepo
}

// NewMockTwitterRepo creates a new mock instance.
func NewMockTwitterRepo(ctrl *gomock.Controller) *MockTwitterRepo {
	mock := &MockTwitterRepo{ctrl: ctrl}
	mock.recorder = &MockTwitterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwitterRepo) EXPECT() *MockTwitterRepoMockRecorder {
	return m.recorder
}

// GetTwitterUserTimeline mocks base method.
func (m *MockTwitterRepo) GetTwitterUserTimeline(userScreenName string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTwitterUserTimeline", userScreenName)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTwitterUserTimeline indicates an expected call of GetTwitterUserTimeline.
func (mr *MockTwitterRepoMockRecorder) GetTwitterUserTimeline(userScreenName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTwitterUserTimeline", reflect.TypeOf((*MockTwitterRepo)(nil).GetTwitterUserTimeline), userScreenName)
}

// MockDiscordRepo is a mock of DiscordRepo interface.
type MockDiscordRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordRepoMockRecorder
}

// MockDiscordRepoMockRecorder is the mock recorder for MockDiscordRepo.
type MockDiscordRepoMockRecorder struct {
	mock *MockDiscordRepo
}

// NewMockDiscordRepo creates a new mock instance.
func NewMockDiscordRepo(ctrl *gomock.Controller) *MockDiscordRepo {
	mock := &MockDiscordRepo{ctrl: ctrl}
	mock.recorder = &MockDiscordRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordRepo) EXPECT() *MockDiscordRepoMockRecorder {
	return m.recorder
}

// GetDiscordInfo mocks base method.
func (m *MockDiscordRepo) GetDiscordInfo(code, redirectURI string) (*model.DiscordUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscordInfo", code, redirectURI)
	ret0, _ := ret[0].(*model.DiscordUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscordInfo indicates an expected call of GetDiscordInfo.
func (mr *MockDiscordRepoMockRecorder) GetDiscordInfo(code, redirectURI interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscordInfo", reflect.TypeOf((*MockDiscordRepo)(nil).GetDiscordInfo), code, redirectURI)
}

// MockPeopleLandContractRepo is a mock of PeopleLandContractRepo interface.
type MockPeopleLandContractRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPeopleLandContractRepoMockRecorder
}

// MockPeopleLandContractRepoMockRecorder is the mock recorder for MockPeopleLandContractRepo.
type MockPeopleLandContractRepoMockRecorder struct {
	mock *MockPeopleLandContractRepo
}

// NewMockPeopleLandContractRepo creates a new mock instance.
func NewMockPeopleLandContractRepo(ctrl *gomock.Controller) *MockPeopleLandContractRepo {
	mock := &MockPeopleLandContractRepo{ctrl: ctrl}
	mock.recorder = &MockPeopleLandContractRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeopleLandContractRepo) EXPECT() *MockPeopleLandContractRepoMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockPeopleLandContractRepo) BalanceOf(address string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", address)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockPeopleLandContractRepoMockRecorder) BalanceOf(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockPeopleLandContractRepo)(nil).BalanceOf), address)
}
